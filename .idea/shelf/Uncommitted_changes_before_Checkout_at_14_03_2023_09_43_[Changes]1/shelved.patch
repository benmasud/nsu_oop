Index: Task_2_2_1/src/Main.java
===================================================================
diff --git a/Task_2_2_1/src/Main.java b/Task_2_2_1/src/Main.java
new file mode 100644
--- /dev/null	
+++ b/Task_2_2_1/src/Main.java	
@@ -0,0 +1,5 @@
+public class Main {
+    public static void main(String[] args) {
+        System.out.println("Hello world!");
+    }
+}
\ No newline at end of file
Index: Task_2_2_1/src/Oders.java
===================================================================
diff --git a/Task_2_2_1/src/Oders.java b/Task_2_2_1/src/Oders.java
new file mode 100644
--- /dev/null	
+++ b/Task_2_2_1/src/Oders.java	
@@ -0,0 +1,2 @@
+public class Oders {
+}
Index: Task_2_2_1/src/Pizza.java
===================================================================
diff --git a/Task_2_2_1/src/Pizza.java b/Task_2_2_1/src/Pizza.java
new file mode 100644
--- /dev/null	
+++ b/Task_2_2_1/src/Pizza.java	
@@ -0,0 +1,2 @@
+public class Pizza {
+}
Index: Task_2_2_1/src/Backer.java
===================================================================
diff --git a/Task_2_2_1/src/Backer.java b/Task_2_2_1/src/Backer.java
new file mode 100644
--- /dev/null	
+++ b/Task_2_2_1/src/Backer.java	
@@ -0,0 +1,2 @@
+public class Backer {
+}
Index: Task_2_2_1/src/Client.java
===================================================================
diff --git a/Task_2_2_1/src/Client.java b/Task_2_2_1/src/Client.java
new file mode 100644
--- /dev/null	
+++ b/Task_2_2_1/src/Client.java	
@@ -0,0 +1,2 @@
+public class Client {
+}
Index: Task_2_2_1/src/Courier.java
===================================================================
diff --git a/Task_2_2_1/src/Courier.java b/Task_2_2_1/src/Courier.java
new file mode 100644
--- /dev/null	
+++ b/Task_2_2_1/src/Courier.java	
@@ -0,0 +1,2 @@
+public class Courier {
+}
Index: Task_2_2_1/src/Storage.java
===================================================================
diff --git a/Task_2_2_1/src/Storage.java b/Task_2_2_1/src/Storage.java
new file mode 100644
--- /dev/null	
+++ b/Task_2_2_1/src/Storage.java	
@@ -0,0 +1,2 @@
+public class Storage {
+}
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>rootProject.name = 'oop'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/settings.gradle b/settings.gradle
--- a/settings.gradle	
+++ b/settings.gradle	
@@ -1,1 +1,4 @@
 rootProject.name = 'oop'
+include 'Task_2_1_1'
+include 'TasK_2_2_1'
+include 'Task_1_3_1'
\ No newline at end of file
Index: Task_2_2_1/src/PizzaDeliverySystem.java
===================================================================
diff --git a/Task_2_2_1/src/PizzaDeliverySystem.java b/Task_2_2_1/src/PizzaDeliverySystem.java
new file mode 100644
--- /dev/null	
+++ b/Task_2_2_1/src/PizzaDeliverySystem.java	
@@ -0,0 +1,110 @@
+import java.util.concurrent.*;
+import java.util.concurrent.atomic.AtomicInteger;
+
+public class PizzaDeliverySystem {
+    private static final int MAX_WAREHOUSE_SIZE = 100; // maximum number of pizzas that can be stored in the warehouse
+    private static final int MAX_TRUNK_CAPACITY = 10; // maximum number of pizzas that a courier can carry in one trip
+
+    private final BlockingQueue<Order> orderQueue = new LinkedBlockingQueue<>();
+    private final BlockingQueue<Pizza> warehouse = new LinkedBlockingQueue<>(MAX_WAREHOUSE_SIZE);
+
+    private final AtomicInteger orderCounter = new AtomicInteger(0);
+
+    private final Baker[] bakers;
+    private final Courier[] couriers;
+
+    public PizzaDeliverySystem(int numBakers, int numCouriers) {
+        this.bakers = new Baker[numBakers];
+        for (int i = 0; i < numBakers; i++) {
+            this.bakers[i] = new Baker("Baker " + i);
+            this.bakers[i].start();
+        }
+
+        this.couriers = new Courier[numCouriers];
+        for (int i = 0; i < numCouriers; i++) {
+            this.couriers[i] = new Courier("Courier " + i);
+            this.couriers[i].start();
+        }
+    }
+
+    public void submitOrder(Order order) throws InterruptedException {
+        order.setId(orderCounter.incrementAndGet());
+        orderQueue.put(order);
+    }
+
+    private void bakePizza(Order order) throws InterruptedException {
+        Thread.sleep(order.getBakeTime()); // simulate baking time
+        Pizza pizza = new Pizza(order);
+        warehouse.put(pizza);
+    }
+
+    private void deliverPizza(Courier courier) throws InterruptedException {
+        int pizzasDelivered = 0;
+        while (pizzasDelivered < MAX_TRUNK_CAPACITY) {
+            Pizza pizza = warehouse.poll(1, TimeUnit.SECONDS);
+            if (pizza == null) {
+                break; // no more pizzas available in warehouse
+            }
+            courier.deliverPizza(pizza);
+            pizzasDelivered++;
+        }
+        courier.setAvailable(true);
+    }
+
+    private class Baker extends Thread {
+        public Baker(String name) {
+            super(name);
+        }
+
+        @Override
+        public void run() {
+            while (true) {
+                try {
+                    Order order = orderQueue.take();
+                    System.out.printf("%s starts baking order %d\n", getName(), order.getId());
+                    bakePizza(order);
+                    System.out.printf("%s finishes baking order %d\n", getName(), order.getId());
+                } catch (InterruptedException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+
+    private class Courier extends Thread {
+        private boolean available = true;
+
+        public Courier(String name) {
+            super(name);
+        }
+
+        public boolean isAvailable() {
+            return available;
+        }
+
+        public void setAvailable(boolean available) {
+            this.available = available;
+        }
+
+        public void deliverPizza(Pizza pizza) throws InterruptedException {
+            System.out.printf("%s starts delivering order %d\n", getName(), pizza.getOrder().getId());
+            Thread.sleep(pizza.getOrder().getDeliveryTime()); // simulate delivery time
+            System.out.printf("%s finishes delivering order %d\n", getName(), pizza.getOrder().getId());
+        }
+
+        @Override
+        public void run() {
+            while (true) {
+                try {
+                    if (available) {
+                        System.out.printf("%s checks for pizzas to deliver\n", getName());
+                        deliverPizza(this);
+                    }
+                    Thread.sleep(100); // check for available pizzas every 100 milliseconds
+                } catch (InterruptedException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+}
Index: Task_2_2_1/Task_2_2_1.iml
===================================================================
diff --git a/Task_2_2_1/Task_2_2_1.iml b/Task_2_2_1/Task_2_2_1.iml
new file mode 100644
--- /dev/null	
+++ b/Task_2_2_1/Task_2_2_1.iml	
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="Gradle: org.apache.commons:commons-math3:3.2" level="project" />
+  </component>
+</module>
\ No newline at end of file
